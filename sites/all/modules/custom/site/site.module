<?php

define('MSG_PROPOSAL_NEEDS_REVIEW', 'Many thanks for your contribution. It will appear on the site very shortly, just as soon as we have confirmed that it meets the <a href="/terms-and-conditions">Terms and Conditions</a>.');
define('MSG_PROPOSAL_DRAFT', 'Please note that you can come back to do more work on your proposal later, draft versions of proposals are listed in <a href="/monitor-progress">\'Monitor Progress\'</a> section.');

/**
 * Implements hook_menu().
 */
function site_menu() {
  $items['admin/config/standardshub'] = array(
      'title' => 'Standards Hub',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('site_standardhub_settings_form'),
      'access arguments' => array('access administration pages'),
  );

  $items['ajax/popup/%'] = array(
      'title' => 'Standards Hub',
      'page callback' => 'proposal_help_popup_on_off',
      'page arguments' => array(2),
      'access arguments' => array('view own unpublished content'),
      'type' => MENU_CALLBACK,
  );
  return $items;
}


function site_standardhub_settings_form($form, &$form_state) {
  $form['proposal_help_html'] = array(
      '#type' => 'textarea',
      '#title' => t('Proposal popup help HTML'),
      '#rows' => 20,
      '#default_value' => variable_get('proposal_help_html', ''),
      '#description' => t("Help text (not filtered HTML) displayed in popup window when clicking 'make proposal' link."),
  );
  return system_settings_form($form);
}

function proposal_help_popup_on_off($state) {
  if ($state != '0' && $state != '1')
    die();
  global $user;
  $user_full = user_load($user->uid);
  $user_full->field_proposal_popup['und'][0]['value'] = $state;
  user_save($user_full);
}

/**
 * Implements hook_block_info().
 */
function site_block_info() {
  $blocks['login_to_make_proposal'] = array(
      'info' => t('Login to make proposal'),
      'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['make_proposal'] = array(
      'info' => t('Make proposal if challenge filter set'),
      'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function site_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();
  switch ($delta) {
    case 'login_to_make_proposal':
      $block['subject'] = '';
      global $user;
      if ($user->uid == 0) {
        $block['content'] = '<a href="/user/login?destination=node">Login</a> or <a href="/user/register?destination=node">Register</a> to make proposal';
      } else {
        $block['content'] = '<div>Logged in as ' . $user->name . ' | <a href="/user">My Profile</a> | <a href="/user/logout">Logout</a></div>';
      }
      break;
    case 'make_proposal':
      $block['subject'] = '';
      global $user;
      if (isset($_GET['field_challenge_ref_nid'])) {
        if ($user->uid != 0) {
          $challenge_nid = (int)$_GET['field_challenge_ref_nid'];
          $block['content'] = '<div class="track-progress-div">&nbsp;</div><div class="track-progress-div white-top">&nbsp;</div>'
                              . '<h3 class="align-center"><a href="/node/add/proposal?chid=' . $challenge_nid . '">Make new proposal</a></h3>';

        }
        else {

          $vars = $_GET;
          $url = $vars['q'] . '?';
          unset ($vars['q']);
          foreach ($vars as $key => $value) {
            $url .= $key . '=' . $value . '&';
          }

          $block['content'] = '<div class="track-progress-div">&nbsp;</div><div class="track-progress-div white-top">&nbsp;</div>'
                              . '<h3 class="align-center"><a href="/user/login?destination=' . urlencode($url) . '">Login</a> or <a href="/user/register?destination=' . urlencode($url) . '">Register</a> to make proposal</h3>';
        }
      }
      break;
  }
  return $block;
}

function site_node_presave($node) {
  if ($node->type == 'challenge') {

    $status = (int) $node->field_challenge_status['und'][0]['value'];

    $sql = 'UPDATE {node_revision} nr
            INNER JOIN {field_data_field_challenge_ref} chref
            ON nr.vid = chref.revision_id AND nr.nid = chref.entity_id
            SET nr.comment = :status
            WHERE chref.field_challenge_ref_nid = :nid
            ';

    $result = db_query($sql, array(':status' => $status + 1, ':nid' => $node->nid));

    $a = 1;
  }
}

/**
 * Implements hook_form_alter().
 */
function site_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  switch ($form_id) {
    case 'proposal_node_form':

      if (!in_array('editor', array_values($user->roles)) && !in_array('administrator', array_values($user->roles))) {

        //amendments for non admin users
        $form['body']['und'][0]['#after_build'][] = 'site_proposal_body_after_build';
        $form['field_challenge_ref']['#type'] = 'hidden';
        $form['field_proposal_progress']['#type'] = 'hidden';
        $form['revision_information']['#type'] = 'hidden';
        $form['field_category']['#type'] = 'hidden';
        $form['field_proposal_status']['#type'] = 'hidden';

        $form['actions']['submit']['#value'] = 'Save draft';

        $form['actions']['publish']['#type'] = 'submit';
        $form['actions']['publish']['#access'] = TRUE;
        $form['actions']['publish']['#value'] = 'Publish';
        $form['actions']['publish']['#type'] = 'submit';
        $form['actions']['publish']['#weight'] = 6;
        $form['actions']['publish']['#submit'] = $form['actions']['submit']['#submit'];

        _site_proposal_popup_help($form);

        $form['field_category']['#type'] = 'hidden';

        //challenge id is required when idea is created by non admin user, it applies only on newly created nodes
        if ((isset($_GET['chid']) && (int) $_GET['chid'] > 0) || isset($form['#node']->nid)) {
          if(isset($_GET['chid'])) {
            $form['field_chid']['#type'] = 'value';
            $form['field_chid']['#value'] = (int) $_GET['chid'];
          }

          $form['#submit'][] = 'site_proposal_node_submit';
          $form['#validate'][] = 'site_proposal_node_validate';

          $challenge_nid = isset($form['field_chid']) ? $form['field_chid']['#value'] : $form['#node']->field_challenge_ref['und'][0]['nid'];
          $challenge = node_load($challenge_nid);
          $form['field_challenge_content']['#type'] = 'item';
          $form['field_challenge_content']['#markup'] = '<div id="form-challenge">'
                  . '<h3>Challenge: ' . $challenge->title . '</h3>'
                  . $challenge->body['und'][0]['safe_value']
                  . '<a class="make-proposal" href="#">Make proposal</a>'
                  . '</div>'
                  . '<div id="form-proposal">'
                  . '<h3>Challenge: ' . $challenge->title . '</h3>'
                  .'</div>';

//            $explanation_block = block_custom_block_get(4);
//            $form['field_challenge_content']['#markup'] .= $explanation_block['body'];


          $form['field_challenge_content']['#weight'] = -2;
        }

        //display error message
        else {
          $form['title'] = NULL;
          $form['body'] = NULL;
          $form['field_why'] = NULL;
          $form['field_when'] = NULL;
          $form['field_how'] = NULL;
          $form['field_resources'] = NULL;
          $form['field_progress'] = NULL;


          $form['actions'] = array();

          $form['field_error']['#type'] = 'item';
          $form['field_error']['#markup'] = 'Wrong form variables.';
        }

      }
      break;

    case 'contact_site_form':
      $form['desc']['#type'] = 'item';
      $form['desc']['#markup'] = 'We welcome your comments, whether these relate to the website or to the underlying standards process itself. Please use this form to tell us what you think.';
      $form['desc']['#weight'] = -1;
      break;

    case 'relation_add_block_form':
      $form['current_entity']['#type'] = 'hidden';

      $form['relation_type']['#type'] = 'value';
      $form['relation_type']['#value'] = 'profile_version';

      //$form['relation_type']['#default_value'] = 'profile_version';






      $relation_type = relation_type_load('profile_version');
      $relation = (object) relation_create('profile_version', array());

      // Create one autocomplete for each endpoint beyond the first
      $direction = '/target';
      for ($i = 2; $i <= $relation_type->max_arity; $i++) {
        $form['relation_options']['targets']['target_' . $i] = array(
            '#type' => 'textfield',
            '#title' => t('Standard Version'),
            '#autocomplete_path' => 'relation_add/autocomplete/profile_version' . $direction,
        );
      }
      field_attach_form('relation', $relation, $form['relation_options'], $form_state);
      unset($form['relation_options']['endpoints']);
      unset($form['relation_options']['explanation']);

      $form['relation_options']['save'] = array(
          '#type' => 'submit',
          '#weight' => 100,
          '#value' => t('Create relation'),
          '#submit' => array('relation_add_save'),
      );

      break;

//    default:
//      break;
  }
}

function _site_proposal_popup_help(&$form) {
  global $base_url;
  $fancybox_path = $base_url . '/sites/all/libraries/fancybox';
  drupal_add_js($fancybox_path . '/jquery.fancybox-1.3.4.js', array('type' => 'file'));
  drupal_add_css($fancybox_path . '/jquery.fancybox-1.3.4.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

  $this_module_path = drupal_get_path('module', 'site');

  drupal_add_js($this_module_path . '/proposal_popup.js', array('type' => 'file'));
  drupal_add_css($this_module_path . '/proposal_popup.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

  global $user;
  $user_full = user_load($user->uid);
  $form['proposal_popup']['#type'] = 'item';
  $form['proposal_popup']['#markup'] = variable_get('proposal_help_html', '');
  $form['proposal_popup']['#weight'] = -1;

  if ($user_full->field_proposal_popup['und'][0]['value']) {
    $form['proposal_popup']['#markup'] .= '<div id="proposal_help_html" style="display: none"></div>';
  }
}

function site_proposal_node_validate($form, &$form_state) {
  $challenge_nid = isset($form_state['values']['field_chid']) ? $form_state['values']['field_chid'] : $form_state['values']['field_challenge_ref']['und'][0]['nid'];
  $challenge = node_load($challenge_nid);
  if (!isset($challenge->field_challenge_status['und']) || !$challenge->field_challenge_status['und'][0]['value']) {
    form_set_error('title', 'Challenge "' . $challenge->title . '" is closed. Making proposals against that challenge is not allowed.');
  }
}

/**
 * Custom submit function for idea content type.
 * Caleld only when node is created not edited.
 */
function site_proposal_node_submit($form, &$form_state) {
  if (isset($form_state['values']['field_chid'])){
    $challenge_nid = $form_state['values']['field_chid'];
    $challenge = node_load($challenge_nid);
    $form_state['values']['field_challenge_ref']['und'][0]['nid'] = $challenge_nid;
    $form_state['values']['field_category'] = $challenge->field_category;
  }
  if ($form_state['clicked_button']['#value'] == "Publish") {
    $form_state['values']['field_proposal_status']['und'][0]['value'] = 'needs_review';
  }
  else {
    $form_state['values']['field_proposal_status']['und'][0]['value'] = 'draft';
  }
}

function site_node_insert($node) {
  _site_set_moderation($node);
}

function site_node_update($node) {
  _site_set_moderation($node);
}

function _site_set_moderation($node) {
  if ($node->type == 'proposal') {
    global $user;
    $status = $node->field_proposal_status['und'][0]['value'];
    if ($status == 'needs_review') {
      if (in_array('trusted user', array_values($user->roles))){
        $status = 'published';
      }
      else {
        drupal_set_message(MSG_PROPOSAL_NEEDS_REVIEW);
      }
    }
    else {
      drupal_set_message(MSG_PROPOSAL_DRAFT);
    }


    if ($status != 'draft') {
      $node->workbench_moderation_state_new = $status;
    }
    else {
      $node->workbench_moderation_state_new = 'draft';
    }
  }
}

/**
 * After build call back function for body field.
 */
function site_proposal_body_after_build($element, &$form_state) {
  $element['summary'] = NULL; //turn off option for adding body field summary for non admin users
  return $element;
}

//function site_preprocess_node(&$vars) {
//  $a=1;
//}
//
//function site_node_view($node, $view_mode, $langcode) {
//  $a=1;
//}

function site_page_alter(&$page) {
  // Removes default Drupal messages about creating and updating proposal.
  if (isset($_SESSION['messages']['status'])) {
    if ($_SESSION['messages']['status'][0] == MSG_PROPOSAL_DRAFT || $_SESSION['messages']['status'][0] == MSG_PROPOSAL_NEEDS_REVIEW) {
      unset($_SESSION['messages']['status'][1]);
    }
  }

  //node 132 is 'Track Progress' landong page
  if(isset($page['content']['system_main']['nodes'][132])){
    unset($page['content']['system_main']['nodes'][132]['links']);
  }


  global $user;
  if (in_array('editor', array_values($user->roles))) {
    //if (substr($_GET['q'], 0, 4) == 'user') {
      _set_admin_help_message();
    //}
  }
}

///**
// * Implements hook_user_login().
// *
// * Adds helpfull links for editor users
// */
//function site_user_login(&$edit, $account) {
//  if (in_array('editor', array_values($account->roles))) {
//    _set_admin_help_message();
//  }
//}

function _set_admin_help_message() {
  drupal_set_message(
          '<ul class="admin-help-message">'
          . '<li><a href="/node/add/challenge">New Challenge</a></li>'
          . '<li><a href="/node/add/profile">New Standard Profile</a></li>'
          . '<li><a href="/node/add/standard">New Standard</a></li>'
          . '<li><a href="/node/add/standard-version">New Standard Version</a></li>'
          . '<li><a href="/node/add/meeting-minute">New Meeting Minute</a></li>'
          . '<li><a href="/node/add/webform">New Survey</a></li>'
          . '</ul>'
          . '<ul class="admin-help-message">'
          . '<li><a href="/admin/people/people">Users</a></li>'
          . '<li><a href="/admin/structure/taxonomy/category/list">"Domain" terms</a></li>'
          . '<li><a href="/admin/content/comment/approval">Comment moderation</a></li>'
          . '<li><a href="/offensive-comments">Offensive comments</a></li>'
          . '<li><a href="/admin/workbench/needs-review">Proposal moderation</a></li>'
          . '<li><a href="/offensive-proposals">Offensive proposals</a></li>'
          . '</ul>'
  );
}

/**
 * Implements hook_field_formatter_info().
 *
 * Custom widget for dispaying 'standard profile to standard version' relation
 */
function site_field_formatter_info() {
  return array(
      'relation_full' => array(
          'label' => t('Standards Hub custom'),
          'field types' => array('relation'),
      ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Custom widget for dispaying 'standard profile to standard version' relation
 */
function site_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  list($entity_id) = entity_extract_ids($entity_type, $entity);
  switch ($display['type']) {

    case 'relation_full':
      foreach ($items as $delta => $item) {
        $links = array();
        $relation = (object) $item;
        foreach (array_filter($relation->endpoints[LANGUAGE_NONE]) as $endpoint) {
          $related_entities = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
          $related_entity = reset($related_entities);
          if ($endpoint['entity_type'] == $entity_type && $endpoint['entity_id'] == $entity_id) {
            if ($display['type'] == 'relation_full') {
              continue;
            }
            $link = array();
          } else {
            $link = entity_uri($endpoint['entity_type'], $related_entity);
            $link['href'] = $link['path'];
          }
          $link['title'] = entity_label($endpoint['entity_type'], $related_entity);
          $links[] = $link;

          $field = field_info_field('field_standard_usage');

          $value = $relation->field_standard_usage['und'][0]['value'];
          $links[] = array('title' => '- ' . $field['settings']['allowed_values'][$value]);

          if (user_access('edit relations')) {
            $link['title'] = 'edit';
            global $base_url;
            $link['href'] =  $base_url . '/relation/' . $relation->rid . '/edit';
            $links[] = $link;
          }

        }
        $uri = entity_uri('relation', $relation);
        $relation_link = l(t('Relation @rid', array('@rid' => $relation->rid)), $uri['path'], $uri['options']);
        // Can't use #heading as it's mercilessly check_plain'd.
        $element[$delta]['relation']['heading']['#markup'] = t('<h4>Part of !link</h4>', array('!link' => $relation_link));
        $element[$delta]['relation']['heading']['#access'] = $display['type'] == 'relation_default';
        $element[$delta]['relation']['links'] = array(
            '#theme' => 'links',
            '#links' => $links,
        );
      }
      break;
  }

  return $element;
}