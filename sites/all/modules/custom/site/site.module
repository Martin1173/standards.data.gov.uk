<?php

define('MSG_NEEDS_REVIEW', 'Many thanks for your contribution. It will appear on the site very shortly, just as soon as we have confirmed that it meets the <a href="/terms-and-conditions">Terms and Conditions</a>.');
define('MSG_DRAFT', 'Please note that you can come back to do more work on your contribution later, draft versions are listed in <a href="/monitor-progress">\'My Dashboard\'</a>.');

/**
 * Implements hook_menu().
 */
function site_menu() {
  $items['admin/config/standardshub'] = array(
      'title' => 'Standards Hub',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('site_standardhub_settings_form'),
      'access arguments' => array('access administration pages'),
  );

  $items['ajax/popup/%'] = array(
      'title' => 'Standards Hub',
      'page callback' => 'proposal_help_popup_on_off',
      'page arguments' => array(2),
      'access arguments' => array('view own unpublished content'),
      'type' => MENU_CALLBACK,
  );
  return $items;
}


function site_standardhub_settings_form($form, &$form_state) {
  $form['proposal_help_html'] = array(
      '#type' => 'textarea',
      '#title' => t('Proposal popup help HTML'),
      '#rows' => 20,
      '#default_value' => variable_get('proposal_help_html', ''),
      '#description' => t("Help text (not filtered HTML) displayed in popup window when clicking 'make proposal' link."),
  );
  return system_settings_form($form);
}

function proposal_help_popup_on_off($state) {
  if ($state != '0' && $state != '1')
    die();
  global $user;
  $user_full = user_load($user->uid);
  $user_full->field_proposal_popup['und'][0]['value'] = $state;
  user_save($user_full);
}

/**
 * Implements hook_block_info().
 */
function site_block_info() {
  $blocks['login_to_make_proposal'] = array(
      'info' => t('Login to participate'),
      'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['suggest_challenge'] = array(
      'info' => t('Suggest new challenge'),
      'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['make_proposal'] = array(
      'info' => t('Make response if challenge filter set'),
      'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function site_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'login_to_make_proposal':
      $block['subject'] = '';
      if (user_is_anonymous()) {
        $block['content'] = l('Login', 'user/login', array('query' => drupal_get_destination())) . ' or ' . l('Register', 'user/register', array('query' => drupal_get_destination())) . ' to participate';
      } else {
        global $user;
        $block['content'] = '<div>Logged in as ' . $user->name . ' | <a href="/user">My Profile</a> | <a href="/user/logout">Logout</a></div>';
      }
      break;

    case 'suggest_challenge':
      $block['subject'] = '';
      if (user_is_anonymous()) {
        $block['content'] = l('Login', 'user/login', array('query' => array('destination' => 'node/add/challenge'))) . ' or ' . l('Register', 'user/register', array('query' => array('destination' => 'node/add/challenge'))) . ' to suggest new challenge';
      } else {
        $block['content'] = l('Suggest new challenge', 'node/add/challenge', array('query' => array('destination' => 'challenges/suggested')));
      }
      break;

    case 'make_proposal':
      $block['subject'] = '';
      global $user;
      if (isset($_GET['field_challenge_ref_nid'])) {
        if ($user->uid != 0) {
          $challenge_nid = (int)$_GET['field_challenge_ref_nid'];
          $block['content'] = '<div class="track-progress-div">&nbsp;</div><div class="track-progress-div white-top">&nbsp;</div>'
                              . '<h3 class="align-center"><a href="/node/add/proposal?chid=' . $challenge_nid . '">Make new response</a></h3>';

        }
        else {
          $vars = $_GET;
          $url = $vars['q'] . '?';
          unset ($vars['q']);
          foreach ($vars as $key => $value) {
            $url .= $key . '=' . $value . '&';
          }

          $block['content'] = '<div class="track-progress-div">&nbsp;</div><div class="track-progress-div white-top">&nbsp;</div>'
                              . '<h3 class="align-center"><a href="/user/login?destination=' . urlencode($url) . '">Login</a> or <a href="/user/register?destination=' . urlencode($url) . '">Register</a> to make proposal</h3>';
        }
      }
      break;
  }
  return $block;
}


function is_admin(&$user) {
  //TODO check permission not role
  return $user->uid == 1 || in_array('editor', array_values($user->roles)) || in_array('administrator', array_values($user->roles));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function site_form_challenge_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  // Always hide
  $form['field_completion_status']['#type'] = 'hidden';

  if (!is_admin($user)) {
    $form['revision_information']['#type'] = 'hidden';
    $form['field_challenge_status']['#type'] = 'hidden';

    $form['field_archive_reason']['#type'] = 'hidden';
    unset($form['field_archive_date']);
    unset($form['field_review_date']);
    unset($form['field_sro']);
    unset($form['field_featured']);
    unset($form['field_weight']);

    $form['actions']['publish']['#type'] = 'submit';
    $form['actions']['publish']['#access'] = TRUE;
    $form['actions']['publish']['#value'] = 'Submit';
    $form['actions']['publish']['#type'] = 'submit';
    $form['actions']['publish']['#weight'] = 6;
    $form['actions']['publish']['#submit'] = $form['actions']['submit']['#submit'];
    $form['actions']['submit']['#value'] = 'Save draft';
  }
  $form['#submit'][] = 'site_challenge_node_submit';
  //$form['#after_build'][] = 'site_challenge_node_after_build';
}

//function site_challenge_node_after_build($form, $form_state) {
//  return $from;
//}

/**
 * Custom submit function for challenge content type.
 */
function site_challenge_node_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == "Submit") {
    $form_state['values']['field_completion_status']['und'][0]['value'] = 'needs_review';
  }
  elseif ($form_state['clicked_button']['#value'] == "Save") {
    $form_state['values']['field_completion_status']['und'][0]['value'] = 'published';
  }
  else {
    $form_state['values']['field_completion_status']['und'][0]['value'] = 'draft';
  }
}




/**
 * Implements hook_form_FORM_ID_alter().
 */
function site_form_proposal_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_set_title('My response');
  global $user;
  // Always hide
  $form['field_completion_status']['#type'] = 'hidden';

  //TODO check permission not role
  if (!in_array('editor', array_values($user->roles)) && !in_array('administrator', array_values($user->roles))) {
    $form['revision_information']['#type'] = 'hidden';
    $form['field_challenge_ref']['#type'] = 'hidden';
    $form['field_proposal_ref']['#type'] = 'hidden';
    $form['field_category']['#type'] = 'hidden';
    $form['field_proposal_status']['#type'] = 'hidden';
    $form['field_proposal_phase']['#type'] = 'hidden';

    $form['field_archive_reason']['#type'] = 'hidden';
    unset($form['field_archive_date']);
    unset($form['field_review_date']);

    $form['actions']['publish']['#type'] = 'submit';
    $form['actions']['publish']['#access'] = TRUE;
    $form['actions']['publish']['#value'] = 'Submit';
    $form['actions']['publish']['#type'] = 'submit';
    $form['actions']['publish']['#weight'] = 6;
    $form['actions']['publish']['#submit'] = $form['actions']['submit']['#submit'];

    $form['actions']['submit']['#value'] = 'Save draft';

    //TODO fix popup proposal help
    _site_proposal_popup_help($form);


    //challenge id is required when response is created by non admin user, it applies only to new nodes
    if ((isset($_GET['chid']) && (int) $_GET['chid'] > 0) || isset($form['#node']->nid)) {
      if(isset($_GET['chid'])) {
        $form['field_chid']['#type'] = 'value';
        $form['field_chid']['#value'] = (int) $_GET['chid'];
      }

      $form['#submit'][] = 'site_proposal_node_submit';
      $form['#validate'][] = 'site_proposal_node_validate';

      $challenge_nid = isset($form['field_chid']) ? $form['field_chid']['#value'] : $form['#node']->field_challenge_ref['und'][0]['nid'];
      $challenge = node_load($challenge_nid);
      $render_array = node_view($challenge, $view_mode = 'full');
      unset($render_array['links']);
      unset($render_array['field_challenge_status']);
      $title = $challenge->title;
      $render_array['#node']->title = '';
      $rendered_markup = render($render_array);

      $form['field_challenge_content']['#type'] = 'item';
      $form['field_challenge_content']['#markup'] = '<div id="form-challenge">'
        . '<h3>Challenge: ' . $title . '</h3>'
        . $rendered_markup
        . '<a class="make-proposal" href="#">Make proposal</a>'
        . '</div>'
        . '<div id="form-proposal">'
        . '<h3>Challenge: ' . $title . '</h3>'
        . '</div>';

      $form['field_challenge_content']['#weight'] = -2;
    }

    //display error message
    else {
      unset($form['title']);
      unset($form['field_category']);
      unset($form['field_tags']);
      unset($form['field_challenge_ref']);
      unset($form['field_short_description']);
      unset($form['field_user_need_approach']);
      unset($form['field_achieving_benefits']);
      unset($form['field_functional_needs']);
      unset($form['field_achieving_interoperability']);
      unset($form['field_standard_version_ref']);
      unset($form['field_standard_to_be_used']);
      unset($form['field_proposal_status']);
      unset($form['field_proposal_phase']);
      unset($form['field_archive_reason']);
      unset($form['field_archive_date']);
      unset($form['field_review_date']);

      $form['actions'] = array();
      $form['field_error']['#type'] = 'item';
      $form['field_error']['#markup'] = 'Wrong form variables.';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function site_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
  $form['desc']['#type'] = 'item';
  $form['desc']['#markup'] = 'We welcome your comments, whether these relate to the website or to the underlying standards process itself. Please use this form to tell us what you think.';
  $form['desc']['#weight'] = -1;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function site_form_relation_add_block_form_alter(&$form, &$form_state, $form_id) {

  $form['current_entity']['#type'] = 'hidden';
  $form['relation_type']['#type'] = 'value';
  $form['relation_type']['#value'] = 'profile_version';

  //$form['relation_type']['#default_value'] = 'profile_version';

  $relation_type = relation_type_load('profile_version');
  $relation = (object) relation_create('profile_version', array());

  // Create one autocomplete for each endpoint beyond the first
  $direction = '/target';
  for ($i = 2; $i <= $relation_type->max_arity; $i++) {
    $form['relation_options']['targets']['target_' . $i] = array(
        '#type' => 'textfield',
        '#title' => t('Standard Version'),
        '#autocomplete_path' => 'relation_add/autocomplete/profile_version' . $direction,
    );
  }
  field_attach_form('relation', $relation, $form['relation_options'], $form_state);
  unset($form['relation_options']['endpoints']);
  unset($form['relation_options']['explanation']);

  $form['relation_options']['save'] = array(
      '#type' => 'submit',
      '#weight' => 100,
      '#value' => t('Create relation'),
      '#submit' => array('relation_add_save'),
  );
}

function _site_proposal_popup_help(&$form) {

  $this_module_path = drupal_get_path('module', 'site');
  drupal_add_js($this_module_path . '/proposal_popup.js', array('type' => 'file'));
  drupal_add_css($this_module_path . '/proposal_popup.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

  global $user;
  $user_full = user_load($user->uid);
  $form['proposal_popup']['#type'] = 'item';
  $form['proposal_popup']['#markup'] = variable_get('proposal_help_html', '');
  $form['proposal_popup']['#weight'] = -1;

  if ($user_full->field_proposal_popup['und'][0]['value']) {
    $form['proposal_popup']['#markup'] .= '<div id="proposal_help_html" style="display: none"></div>';
  }
}

function site_proposal_node_validate($form, &$form_state) {
// TODO check if challenge is open - currently disabled
//  $challenge_nid = isset($form_state['values']['field_chid']) ? $form_state['values']['field_chid'] : $form_state['values']['field_challenge_ref']['und'][0]['nid'];
//  $challenge = node_load($challenge_nid);
//  if (!isset($challenge->field_challenge_status['und']) || !$challenge->field_challenge_status['und'][0]['value']) {
//    form_set_error('title', 'Challenge "' . $challenge->title . '" is closed. Making proposals against that challenge is not allowed.');
//  }
}

/**
 * Custom submit function for proposal content type.
 */
function site_proposal_node_submit($form, &$form_state) {
  if (isset($form_state['values']['field_chid'])){
    $challenge_nid = $form_state['values']['field_chid'];
    $challenge = node_load($challenge_nid);
    $form_state['values']['field_challenge_ref']['und'][0]['nid'] = $challenge_nid;
    $form_state['values']['field_category'] = $challenge->field_category;
  }
  if ($form_state['clicked_button']['#value'] == "Submit") {
    $form_state['values']['field_completion_status']['und'][0]['value'] = 'needs_review';
  }
  else {
    $form_state['values']['field_completion_status']['und'][0]['value'] = 'draft';
  }
}



function site_node_view($node) {

  if ($node->type == 'proposal') {
    $no_message = &drupal_static('no_message');
    if(isset($node->field_incorporated_in[LANGUAGE_NONE][0]['items'])
       && isset($node->field_proposal_status[LANGUAGE_NONE][0]['value'])
       && $node->field_proposal_status[LANGUAGE_NONE][0]['value'] != 5) {
      $node->field_proposal_status[LANGUAGE_NONE][0]['value'] = 5; //incorporated
      $no_message = TRUE;
      node_save($node);
    }
    elseif (empty($node->field_incorporated_in[LANGUAGE_NONE][0]['items']) && $node->field_proposal_status[LANGUAGE_NONE][0]['value'] == 5) { //if not incorporated anymore but status set to incorporated
      $node->field_proposal_status[LANGUAGE_NONE][0]['value'] = 4; //archived
      $no_message = TRUE;
      node_save($node);
    }
  }
}

//function site_node_insert($node) {
//  _site_set_moderation($node);
//}
//
//function site_node_update($node) {
//  _site_set_moderation($node);
//}

function site_node_presave($node) {
  $no_message = drupal_static('no_message');
  if(!$no_message) {
    _site_set_moderation($node);
  }

  if ($node->type == 'challenge') {
    $challenge_status = (int) $node->field_challenge_status['und'][0]['value'];
    if ($challenge_status > 0) {
      // Disable commenting for challenges other than suggested.
      // comments closed == 1; status live == 1, archived == 2, completed == 3
      $node->comment = 1;
    }
    else {
      // Enable commenting for challenges in status suggested.
      // comments open == 2; status suggested == 0;
      $node->comment = 2;
    }


  }

//    $sql = 'UPDATE {node_revision} nr
//            INNER JOIN {field_data_field_challenge_ref} chref
//            ON nr.vid = chref.revision_id AND nr.nid = chref.entity_id
//            SET nr.comment = :status
//            WHERE chref.field_challenge_ref_nid = :nid
//            ';
//    $result = db_query($sql, array(':status' => $comment_status, ':nid' => $node->nid, ':vid' => $node->vid));

}




function _site_set_moderation($node) {
  if (in_array($node->type, array('challenge', 'proposal'))) {
    global $user;

    if (!is_admin($user)) {
      //use field_completion_status as moderation state only for non admins
      $completion_status = $node->field_completion_status['und'][0]['value'];
      if ($completion_status == 'needs_review') {
        drupal_set_message(MSG_NEEDS_REVIEW);
      }
      else {
        drupal_set_message(MSG_DRAFT);
      }

      if ($completion_status != 'draft') {
        $node->workbench_moderation_state_new = $completion_status;
      }
      else {
        $node->workbench_moderation_state_new = 'draft';
      }
    }
    else {
      $node->workbench_moderation_state_new = 'published';
    }
  }
}

function site_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;
  if (is_admin($user) && !empty($data['tabs'][0]['output'])) {
    foreach ($data['tabs'][0]['output'] as $index => &$tab) {
        if($tab['#link']['title'] == 'New draft') {
          $tab['#link']['title'] = 'Edit';
        }
    }

  }
  if($root_path == 'challenges' || $router_item['tab_parent'] == 'challenges') {

    // Count (published) challenges by status
    $query = "SELECT field_challenge_status_value AS status, COUNT(field_challenge_status_value) AS quantity
      FROM {field_data_field_challenge_status} st
      JOIN {node} as n ON st.entity_id = n.nid
      WHERE n.status = 1
      GROUP BY field_challenge_status_value";
    $challenge_statuses = array(0 => 0, 1 => 0, 2 => 0, 3 => 0);
    foreach (db_query($query) as $row) {
      $challenge_statuses[$row->status] = $row->quantity;
    }
    // current
    $data['tabs'][0]['output'][0]['#link']['title'] = $data['tabs'][0]['output'][0]['#link']['title'] . ' (' . $challenge_statuses[1] . ')';
    // suggested
    $data['tabs'][0]['output'][1]['#link']['title'] = $data['tabs'][0]['output'][1]['#link']['title'] . ' (' . $challenge_statuses[0] . ')';
    // archived
    $data['tabs'][0]['output'][2]['#link']['title'] = $data['tabs'][0]['output'][2]['#link']['title'] . ' (' . $challenge_statuses[2] . ')';
    // completed
    $data['tabs'][0]['output'][3]['#link']['title'] = $data['tabs'][0]['output'][3]['#link']['title'] . ' (' . $challenge_statuses[3] . ')';
  }
}


function site_preprocess_page(&$vars) {
  if (arg(0) == 'challenges') {
    $vars['title'] = '';
  }
}

function site_page_alter(&$page) {
  //print_r($page);die;
  // Removes default Drupal messages about creating and updating proposal.
  if (isset($_SESSION['messages']['status'])) {
    if ($_SESSION['messages']['status'][0] == MSG_DRAFT || $_SESSION['messages']['status'][0] == MSG_NEEDS_REVIEW) {
      unset($_SESSION['messages']['status'][1]);
    }
  }

  //node 132 is 'Track Progress' landing page
  if(isset($page['content']['system_main']['nodes'][132])){
    unset($page['content']['system_main']['nodes'][132]['links']);
  }

  if(isset($page['content']['quicktabs_test'])) {
    //if challenge node is present and status is other than 'suggested'
    if($node = node_load(arg(1)) && $node->field_challenge_status[LANGUAGE_NONE][0]['value'] != '0') {
      $divs = &$page['content']['quicktabs_test']['content']['container']['divs'];
      foreach ($page['content']['quicktabs_test']['content']['tabs']['tablinks'] as $index => &$tab) {
        $count = substr_count($divs[$index]['content']['#markup'], 'views-field-title');
        $tab['#title'] = $tab['#title'] . ' (' . $count . ')';
      };
    }
    else {
      unset($page['content']['quicktabs_test']);
    }
  }

  //not displaying comment form on unpublished nodes with no comments
  if(isset($page['content']['system_main']['nodes'])) {
    foreach ($page['content']['system_main']['nodes'] as $nid => &$node) {
      if (is_numeric($nid) && !$node['#node']->comment_count && !$node['#node']->status) {
        unset($node['comments']);
      }

    }

  }

}


/**
 * Implements hook_field_formatter_info().
 *
 * Custom widget for dispaying 'standard profile to standard version' relation
 */
function site_field_formatter_info() {
  return array(
      'relation_full' => array(
          'label' => t('Standards Hub custom'),
          'field types' => array('relation'),
      ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Custom widget for dispaying 'standard profile to standard version' relation
 */
function site_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  list($entity_id) = entity_extract_ids($entity_type, $entity);
  switch ($display['type']) {

    case 'relation_full':
      foreach ($items as $delta => $item) {
        $links = array();
        $relation = (object) $item;
        foreach (array_filter($relation->endpoints[LANGUAGE_NONE]) as $endpoint) {
          $related_entities = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
          $related_entity = reset($related_entities);
          if ($endpoint['entity_type'] == $entity_type && $endpoint['entity_id'] == $entity_id) {
            if ($display['type'] == 'relation_full') {
              continue;
            }
            $link = array();
          } else {
            $link = entity_uri($endpoint['entity_type'], $related_entity);
            $link['href'] = $link['path'];
          }
          $link['title'] = entity_label($endpoint['entity_type'], $related_entity);
          $links[] = $link;

          $field = field_info_field('field_standard_usage');

          $value = $relation->field_standard_usage['und'][0]['value'];
          $links[] = array('title' => '- ' . $field['settings']['allowed_values'][$value]);

          if (user_access('edit relations')) {
            $link['title'] = 'edit';
            global $base_url;
            $link['href'] =  $base_url . '/relation/' . $relation->rid . '/edit';
            $links[] = $link;
          }

        }
        $uri = entity_uri('relation', $relation);
        $relation_link = l(t('Relation @rid', array('@rid' => $relation->rid)), $uri['path'], $uri['options']);
        // Can't use #heading as it's mercilessly check_plain'd.
        $element[$delta]['relation']['heading']['#markup'] = t('<h4>Part of !link</h4>', array('!link' => $relation_link));
        $element[$delta]['relation']['heading']['#access'] = $display['type'] == 'relation_default';
        $element[$delta]['relation']['links'] = array(
            '#theme' => 'links',
            '#links' => $links,
        );
      }
      break;
  }

  return $element;
}